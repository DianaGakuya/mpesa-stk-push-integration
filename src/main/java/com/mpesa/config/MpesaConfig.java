package com.mpesa.config;

import lombok.Getter;
import lombok.Setter;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;

/**
 * M-Pesa Configuration Class - Central Hub for All M-Pesa Settings
 *
 * This class reads configuration from application.properties and makes it available
 * throughout the application. It's like a "settings manager" for your M-Pesa integration.
 *
 * Why this pattern works:
 * - Centralizes all M-Pesa credentials in one place
 * - Easy to switch between sandbox/production environments
 * - Spring automatically injects these values where needed
 * - Keeps sensitive data separate from code
 */
@Getter // Lombok: auto-generates getter methods for all fields
@Setter // Lombok: auto-generates setter methods for all fields
@Configuration // Spring: marks this as a configuration class
public class MpesaConfig {

    /**
     * Safaricom API base URL
     * Sandbox: https://sandbox.safaricom.co.ke (for testing)
     * Production: https://api.safaricom.co.ke (for live transactions)
     */
    @Value("${mpesa.base-url}") // Reads from application.properties: mpesa.base-url=...
    private String baseUrl;

    /**
     * Consumer Key from your Safaricom Developer App
     * This identifies your application to Safaricom
     * Get this from: https://developer.safaricom.co.ke → My Apps → Your App
     */
    @Value("${mpesa.consumer-key}")
    private String consumerKey;

    /**
     * Consumer Secret from your Safaricom Developer App
     * Used with Consumer Key for OAuth2 authentication
     * Keep this SECRET - never expose in public repositories!
     */
    @Value("${mpesa.consumer-secret}")
    private String consumerSecret;

    /**
     * Business Short Code (Paybill/Till Number)
     * Sandbox: 174379 (default test shortcode)
     * Production: Your actual business paybill number from Safaricom
     */
    @Value("${mpesa.shortcode}")
    private String shortCode;

    /**
     * Passkey for your shortcode
     * This is used to generate secure passwords for transactions
     * Provided by Safaricom for your specific shortcode
     *
     * Critical: Without the correct passkey, you get "Invalid BusinessShortCode" errors
     */
    @Value("${mpesa.passkey}")
    private String passkey;

    /**
     * Callback URL where Safaricom sends transaction results
     *
     * Requirements:
     * - Must be publicly accessible (not localhost in production)
     * - Must be HTTPS in production
     * - Should point to your /api/mpesa/callback endpoint
     *
     * Example: https://yourdomain.com/api/mpesa/callback
     */
    @Value("${mpesa.callback-url}")
    private String callbackUrl;

    // Note: Getters and setters are auto-generated by Lombok @Getter/@Setter
    // Spring uses these to inject values from application.properties
}
